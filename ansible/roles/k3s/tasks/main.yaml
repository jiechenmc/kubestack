---
- name: Uninstall K3s if it is installed
  ansible.builtin.command: /usr/local/bin/k3s-uninstall.sh
  when:
    - not ansible_check_mode
  changed_when: false
  ignore_errors: true

- name: Download artifact only if needed
  when:
    - not ansible_check_mode

  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

- name: Add K3s autocomplete to user zshrc
  when: ansible_user is defined
  ansible.builtin.lineinfile:
    path: "~{{ ansible_user }}/.zshrc"
    regexp: '\.\s+<\(k3s completion zsh\)'
    line: ". <(k3s completion zsh)  # Added by k3s-ansible"

- name: Init first server node
  when: inventory_hostname == groups[server_group][0] or ansible_host == groups[server_group][0]
  block:
    - name: Copy K3s service file [Single]
      when: groups[server_group] | length == 1
      ansible.builtin.template:
        src: "k3s-single.service.j2"
        dest: "{{ systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: k3s_service_file_single

    - name: Copy K3s service file [HA]
      when:
        - groups[server_group] | length > 1
      ansible.builtin.template:
        src: "k3s-cluster-init.service.j2"
        dest: "{{ systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: k3s_service_file_ha

    - name: Add service environment variables
      when: extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ extra_service_envs }}"

    - name: Delete any existing token from the environment if different from the new one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ systemd_dir }}/k3s.service.env"
        regexp: "^K3S_TOKEN=\\s*(?!{{ token | default('') | regex_escape }}\\s*$)"

    # Add the token to the environment if it has been provided.
    # Otherwise, let the first server create one on the first run.
    - name: Add token as an environment variable
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir }}/k3s.service.env"
        line: "K3S_TOKEN={{ token }}"
      when: token is defined

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - k3s_service_file_single.changed or k3s_service_file_ha.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when: ansible_facts.services['k3s.service'] is not defined or ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Pause to allow first server startup
      when: (groups[server_group] | length) > 1
      ansible.builtin.pause:
        seconds: 10

    - name: Check whether kubectl is installed on control node
      ansible.builtin.command: "kubectl"
      register: k3s_kubectl_installed
      ignore_errors: true
      delegate_to: 127.0.0.1
      become: false
      changed_when: false

    # Copy the k3s config to a second file to detect changes.
    # If no changes are found, we can skip copying the kubeconfig to the control node.
    - name: Copy k3s.yaml to second file
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /etc/rancher/k3s/k3s-copy.yaml
        mode: "0600"
        remote_src: true
      register: k3s_copy_yaml_file

    - name: Apply K3S kubeconfig to control node
      when:
        - k3s_kubectl_installed.rc == 0
        - k3s_copy_yaml_file.changed
      block:
        - name: Copy kubeconfig to control node
          ansible.builtin.fetch:
            src: /etc/rancher/k3s/k3s.yaml
            dest: "{{ kubeconfig }}"
            flat: true

        - name: Change server address in kubeconfig on control node
          ansible.builtin.shell: |
            KUBECONFIG={{ kubeconfig }} kubectl config set-cluster default --server=https://{{ api_endpoint }}:{{ api_port }}
          delegate_to: 127.0.0.1
          become: false
          register: k3s_csa_result
          changed_when:
            - k3s_csa_result.rc == 0

        - name: Setup kubeconfig context on control node - {{ cluster_context }}
          when: kubeconfig == "~/.kube/config.new"
          ansible.builtin.replace:
            path: "{{ kubeconfig }}"
            regexp: "default"
            replace: "{{ cluster_context }}"
          delegate_to: 127.0.0.1
          become: false

        - name: Merge with any existing kubeconfig on control node
          when: kubeconfig == "~/.kube/config.new"
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            KUBECONFIG={{ kubeconfig }}:~/.kube/config kubectl config set-context {{ cluster_context }} --user={{ cluster_context }} --cluster={{ cluster_context }}
            KUBECONFIG={{ kubeconfig }}:~/.kube/config kubectl config view --flatten > ${TFILE}
            mv ${TFILE} ~/.kube/config
          delegate_to: 127.0.0.1
          become: false
          register: k3s_mv_result
          changed_when:
            - k3s_mv_result.rc == 0

    - name: Get the token if randomly generated
      when: token is not defined
      delegate_to: "{{ hostvars[groups['server'][0]]['ansible_host'] | default(groups['server'][0]) }}"
      block:
        - name: Wait for token
          ansible.builtin.wait_for:
            path: /var/lib/rancher/k3s/server/token

        - name: Read node-token from master
          ansible.builtin.slurp:
            src: /var/lib/rancher/k3s/server/token
          register: k3s_node_token

        - name: Store Master node-token
          ansible.builtin.set_fact:
            k3s_node_token: "{{ k3s_node_token.content | b64decode | regex_replace('\n', '') }}"
          run_once: true

- name: Start other server if any and verify status
  when:
    - (groups[server_group] | length) > 1
    - inventory_hostname != groups[server_group][0] and ansible_host != groups[server_group][0]
  block:
    - name: Get the token from the first server
      ansible.builtin.set_fact:
        k3s_token: "{{ hostvars[groups[server_group][0]].k3s_node_token }}"

    - name: Add service environment variables
      when: extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ extra_service_envs }}"

    - name: Delete any existing token from the environment if different from the new one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ systemd_dir }}/k3s.service.env"
        regexp: "^K3S_TOKEN=\\s*(?!{{ k3s_token }}\\s*$)"

    - name: Add the token for joining the cluster to the environment
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items:
        - "K3S_TOKEN={{ k3s_token }}"

    - name: Copy K3s service file [HA]
      ansible.builtin.template:
        src: "k3s-ha.service.j2"
        dest: "{{ systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: k3s_service_file_ha

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - k3s_service_file_ha.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when: ansible_facts.services['k3s.service'] is not defined or ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Setup kubectl for user
      when: user_kubectl
      block:
        - name: Create directory .kube
          ansible.builtin.file:
            path: ~{{ ansible_user }}/.kube
            state: directory
            owner: "{{ ansible_user }}"
            mode: "u=rwx,g=rx,o="

        - name: Copy config file to user home directory
          ansible.builtin.copy:
            src: /etc/rancher/k3s/k3s.yaml
            dest: ~{{ ansible_user }}/.kube/config
            remote_src: true
            owner: "{{ ansible_user }}"
            mode: "u=rw,g=,o="

        - name: Configure default KUBECONFIG for user
          ansible.builtin.lineinfile:
            path: ~{{ ansible_user }}/.zshrc
            regexp: "export KUBECONFIG=~/.kube/config"
            line: "export KUBECONFIG=~/.kube/config # Added by k3s-ansible"
            state: present

        - name: Configure kubectl autocomplete
          ansible.builtin.lineinfile:
            path: ~{{ ansible_user }}/.zshrc
            regexp: '\.\s+<\(kubectl completion zsh\)'
            line: ". <(kubectl completion zsh)  # Added by k3s-ansible"

    - name: Verify that all server nodes joined
      when: not ansible_check_mode and (groups[server_group] | length) > 1
      ansible.builtin.command:
        cmd: >
          /usr/local/bin/k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: k3s_nodes
      until: k3s_nodes.rc == 0 and (k3s_nodes.stdout.split() | length) == (groups[server_group] | length)
      retries: 6
      delay: 10
      changed_when: false

    - name: Show which nodes joined
      ansible.builtin.debug:
        msg:
          - "Nodes joined: {{ k3s_nodes.stdout.split() }}"
          - "Expected count: {{ groups[server_group] | length }}"
          - "Actual count: {{ k3s_nodes.stdout.split() | length }}"

    - name: Deploy Cilium CNI with Helm
      delegate_to: 127.0.0.1
      become: false
      block:
        - name: Ensure Cilium Helm repo is present
          community.kubernetes.helm_repository:
            name: cilium
            repo_url: "https://helm.cilium.io/"

        - name: Update Helm repos
          ansible.builtin.command:
            cmd: helm repo update
          register: k3s_helm_update
          changed_when: "'Update Complete.' in k3s_helm_update.stdout"

        - name: Deploy or upgrade Cilium
          community.kubernetes.helm:
            name: cilium
            chart_ref: cilium/cilium
            release_namespace: kube-system
            create_namespace: false
            values:
              k8sServiceHost: "{{ hostvars[groups['server'][0]]['ansible_host'] | default(groups['server'][0]) }}"
              k8sServicePort: 6443
              kubeProxyReplacement: true
              ipam:
                operator:
                  clusterPoolIPv4PodCIDRList:
                    - "10.42.0.0/16"
